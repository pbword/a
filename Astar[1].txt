from heapq import heappop, heappush
import numpy as np


class PuzzleState:
    def __init__(self, puzzle, g, h, parent=None):
        self.puzzle = puzzle  # current puzzle state (1D list of numbers)
        self.g = g  # cost to reach this state from start
        self.h = h  # heuristic estimate (Manhattan distance)
        self.parent = parent  # parent state

    def f(self):
        return self.g + self.h

    def __lt__(self, other):
        return self.f() < other.f()

    def __eq__(self, other):
        return self.puzzle == other.puzzle

    def __hash__(self):
        return hash(tuple(self.puzzle))


def get_blank_position(puzzle):
    return puzzle.index(0)


def manhattan_distance(puzzle, goal):
    distance = 0
    for i in range(len(puzzle)):
        if puzzle[i] != 0:
            current_row, current_col = i // 3, i % 3
            goal_index = goal.index(puzzle[i])
            goal_row, goal_col = goal_index // 3, goal_index % 3
            distance += abs(current_row - goal_row) + abs(current_col - goal_col)
    return distance


def get_possible_moves(blank_index):
    moves = []
    if blank_index >= 3:
        moves.append(blank_index - 3)  # move blank up
    if blank_index < 6:
        moves.append(blank_index + 3)  # move blank down
    if blank_index % 3 != 0:
        moves.append(blank_index - 1)  # move blank left
    if blank_index % 3 != 2:
        moves.append(blank_index + 1)  # move blank right
    return moves


def solve_8_puzzle(start, goal):
    open_list = []
    closed_list = set()

    # Initial state
    start_state = PuzzleState(start, 0, manhattan_distance(start, goal))
    heappush(open_list, start_state)

    while open_list:
        current_state = heappop(open_list)

        if current_state.puzzle == goal:
            # Reconstruct the path
            path = []
            while current_state:
                path.append(current_state.puzzle)
                current_state = current_state.parent
            return path[::-1]

        blank_index = get_blank_position(current_state.puzzle)
        possible_moves = get_possible_moves(blank_index)

        for move in possible_moves:
            new_puzzle = current_state.puzzle[:]
            new_puzzle[blank_index], new_puzzle[move] = new_puzzle[move], new_puzzle[blank_index]

            new_g = current_state.g + 1
            new_h = manhattan_distance(new_puzzle, goal)
            new_state = PuzzleState(new_puzzle, new_g, new_h, current_state)

            if new_state in closed_list:
                continue

            if any(new_state == item for item in open_list):
                continue

            heappush(open_list, new_state)

        closed_list.add(current_state)

    return None  # No solution found


# Example usage:
start_puzzle = [1, 2, 3, 4, 5, 6, 0, 7, 8]  # initial puzzle configuration
goal_puzzle = [1, 2, 3, 4, 5, 6, 7, 8, 0]  # goal puzzle configuration

solution_path = solve_8_puzzle(start_puzzle, goal_puzzle)
if solution_path:
    print("Solution found!")
    for step, state in enumerate(solution_path):
        print(f"Step {step + 1}:")
        print(np.array(state).reshape(3, 3))
else:
    print("No solution found.")

OUTPUT:Solution found!
Step 1:
[[1 2 3]
 [4 5 6]
 [0 7 8]]
Step 2:
[[1 2 3]
 [4 5 6]
 [7 0 8]]
Step 3:
[[1 2 3]
 [4 5 6]
 [7 8 0]]


